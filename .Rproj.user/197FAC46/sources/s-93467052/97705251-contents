#' Reactions_Get_All
#' @description This function constructs adjacency lists for compounds, reactions and enzymes listed within the KEGG database
#' @param directory Directory in which to save network data: "wd" (working directory - default), "choose" (manually choose directory)
#' @param CPU The number of cores to use when making KEGGREST API Get requests (default = 2). If CPU > 1, parallel requests will be made.
#' @param sleep The amount of sleep between a potential caught API error and the next attempt (default = 5)
#'
#' @return Rds files for all relevant adjacency lists
#'
Reactions_Get_All <- function(CPU = c(2,1), sleep = 5){
  time = proc.time() #time process
  cat("Querying metabolite, reaction and enzyme data from KEGG\n")
  ##pulling reaction IDs from KEGG:
  Reaction_Raw_IDs <- keggList("reaction")
  ##cleaning up raw data:
  Clean_Reactions <- attr(Reaction_Raw_IDs, "names")
  ##using raw reaction IDs to query KEGG:
  Query_Reaction_Data <- c()
  ##splitting data into chunks of 10 (max KEGG API search)
  split_data <- split(Clean_Reactions, ceiling(seq_along(Clean_Reactions)/10))
  ##Making parallel requests to KEGGREST API:
  cluster = makeCluster(CPU) #creating clusters
  registerDoSNOW(cluster)
  pb <- tkProgressBar(title = "Querying metabolite, reaction and enzyme data from KEGG", min = 0, max = length(split_data), width = 400)
  progress <- function(n) setTkProgressBar(pb, n, label=paste(round(n/length(split_data)*100,1),"% dowloaded"))
  opts <- list(progress = progress)
  Query_Reaction_Data <- foreach(i = 1:length(split_data), .combine = 'c', .packages = c("tcltk"),.export = c("retry"),.options.snow = opts) %dopar% {
    library(KEGGREST)
    library(futile.logger)
    library(utils)
    PanViz:::retry(keggGet(split_data[[i]]), maxErrors = 5, sleep = sleep)
  }
  stopCluster(cluster)
  close(pb)
  ##Cleaning up queried data and separating reaction pair data from compound data::
  Query_Reaction_Data <- lapply(Query_Reaction_Data, PanViz:::reaction_cleanup)
  ##Unlisting reaction pair IDs:
  name_list <- unique(unlist(lapply(Query_Reaction_Data, get_entry <- function(queried_data){if(all(!is.na(queried_data$RP))){return(queried_data$RP)}})))
  ##Creating adjacency list with reaction pairs and their related compounds
  adjl_RP_C <- lapply(name_list, PanViz:::adj_RP_C)
  names(adjl_RP_C) <- name_list
  ##making adjacency list with reactions and their related enzymes:
  ##getting vector of reaction names:
  reaction_names <- unique(unlist(lapply(Query_Reaction_Data, get_entry <- function(queried_data){return(queried_data$ENTRY)})))
  ##creating adjacency list for reactions -> reaction pairs (RP):
  adjl_RP_R <- lapply(Query_Reaction_Data, PanViz:::adj_RP_R)
  ##applying reaction names to adjl:
  names(adjl_RP_R) <- reaction_names
  ##removing any reactions with no associated reaction pairs:
  adjl_RP_R <-  adjl_RP_R[!sapply(adjl_RP_R, function(x) all(is.na(x)))]
  ##creating adjacency list for enzymes -> reactions:
  adjl_R_E <- lapply(Query_Reaction_Data, PanViz:::adj_R_E)
  ##applying reaction names to adjl:
  names(adjl_R_E) <- reaction_names
  ##removing any reactions with no associated enzymes:
  adjl_R_E <-  adjl_R_E[!sapply(adjl_R_E, function(x) all(is.na(x)))]
  ##saving adjacency lists to selected directory:
  return(list(adjl_R_E, adjl_RP_C, adjl_RP_R))
  cat("Metabolite, reaction and enzyme adjacencies successfully queried - time elsapsed: ", (proc.time() - time)[[3]]/60, " minutes")
  cat("\n")
}



