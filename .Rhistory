adjl_RP_C[1]
adjl_RP_R[1]
adjl_R_E[1]
adjl_G_E[1]
##loading KEGG network data adjacency lists from working directory:
# adjl_RP_C <- readRDS(paste0(getwd(), "/adjl_RP_C.Rds"))
# adjl_RP_R <- readRDS(paste0(getwd(), "/adjl_RP_R.Rds"))
# adjl_R_E <- readRDS(paste0(getwd(), "/adjl_R_E.Rds"))
# adjl_G_E <- readRDS(paste0(getwd(), "/adjl_G_E.Rds"))
load(file = paste0(getwd(),"data/KEGG_data.rda"))
load(file = paste0(getwd(),"/data/KEGG_data.rda"))
library(PanViz)
library(PanViz)
library(PanViz)
library(PanViz)
library(PanViz)
library(PanViz)
getwd()
snps_test <- readRDS(paste0(getwd(), "/snp_list.Rds"))
snps_test <- readRDS(paste0(getwd(), "/data/snp_list.Rds"))
library(PanViz)
test <- PanViz::get_IMON(snps_test)
library(PanViz)
test <- PanViz::get_IMON(snps_test)
library(PanViz)
test <- PanViz::get_IMON(snps_test)
test
V(test)[1]
V(test)[[1]]
foo <- function(a, b, c){
return(list(a, b, c))
}
foo(1, 2, 3)
library(PanViz)
PanViz::Get_Kegg_Data(CPU = 2, sleep = 5)
library(PanViz)
load(file = "R/sysdata.rda")
PanViz::Get_Kegg_Data(CPU = 2, sleep = 5)
load(file = "R/sysdata.rda")
View(adjl_G_E)
View(Gene_Locations)
Gene_Locations[1]
Gene_Locations
PanViz::Get_Kegg_Data(CPU = 2, sleep = 5)
load(file = "R/sysdata.rda")
View(adjl_G_E)
dim(adjl_G_E)
dim()
type(adjl_G_E)
class(adjl_G_E)
class(adjl_G_E[[1]])
adjl_G_E[[1]]
test <- list(list(1,2,3), list(1,2,3))
test
test[[1]]
View(Gene_Locations)
Gene_Locations[[1]]
adjl_G_E[[1]]
view(adjl_G_E[[1]])
unlist(adjl_G_E)
load(file = "R/sysdata.rda")
adjl_RP_C <- adjl_RP_C[[1]]
adjl_RP_R <- adjl_RP_R[[1]]
adjl_R_E <- adjl_R_E[[1]]
adjl_G_E <- adjl_G_E[[1]]
view(adjl_G_E)
library(PanViz)
PanViz::Get_Kegg_Data(CPU = 2, sleep = 5)
load(file = "R/sysdata.rda")
View(Gene_Locations)
Get_Kegg_Data <- function(CPU = c(2,1), sleep = 5){
##Querying KEGG for metabolite, reaction and enzyme data:
data <<- PanViz:::retry(PanViz:::Reactions_Get_All(CPU = CPU, sleep = sleep), maxErrors = 3, sleep = sleep)
adjl_R_E <- data[[1]]
adjl_RP_C <- data[[2]]
adjl_RP_R <- data[[3]]
##Querying KEGG for gene data + query gene locations from NCBI
data <- PanViz:::retry(PanViz:::Genes_Get_All(CPU = CPU, sleep = sleep), maxErrors = 3, sleep = sleep)
adjl_G_E <- data[[1]]
Gene_Locations <- data[[2]]
##Querying compound names as hash:
compound_names_hash <-  PanViz:::retry(PanViz:::get_compound_hashmap(CPU = CPU, sleep = sleep), maxErrors = 3, sleep = sleep)
save(adjl_G_E, adjl_R_E, adjl_RP_C, adjl_RP_R, Gene_Locations, compound_names_hash, file = "R/sysdata.rda")
cat("Done! KEGG database successfully updated")
}
Get_Kegg_Data()
data <- PanViz:::retry(PanViz:::Reactions_Get_All(CPU = CPU, sleep = sleep), maxErrors = 3, sleep = sleep)
CPU = 2
sleep = 5
data <- PanViz:::retry(PanViz:::Reactions_Get_All(CPU = CPU, sleep = sleep), maxErrors = 3, sleep = sleep)
data
data[[1]]
test <- data[[1]]
test[1]
test
view(test)
test
View(test)
data[[1]]
data[[2]]
test = data[[2]]
View(test)
adjl_R_E <- data[[1]]
adjl_RP_C <- data[[2]]
adjl_RP_R <- data[[3]]
library(PanViz)
PanViz::Get_Kegg_Data()
load(file = "sysdata.rda")
load(file = "R/sysdata.rda")
View(adjl_G_E)
View(Gene_Locations)
snp_list <- readRDS("C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/data/snp_list.Rds")
snp_list
PanViz::get_IMON(snp_list)
library(PanViz)
PanViz::get_IMON(snp_list)
load(file = "R/sysdata.rda")
library(PanViz)
PanViz::get_IMON(snp_list)
snp_list <- readRDS("C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/data/snp_list.Rds")
PanViz::get_IMON(snp_list)
PanViz::get_IMON(snp_list, ego = 5, export_type = "igraph")
V(G)[[1]]
G = PanViz::get_IMON(snp_list, ego = 5, export_type = "igraph")
V(G)[[1]]
library(PanViz)
df <- PanViz::GWAS_catalog_tsv_to_dataframe("CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
df <- PanViz::GWAS_catalog_tsv_to_dataframe("/data/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
df <- PanViz::GWAS_catalog_tsv_to_dataframe("getwd()/data/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
df <- PanViz::GWAS_catalog_tsv_to_dataframe(paste0(getwd(), "/data/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
)
paste0(getwd(), "/data/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv"
)
PanViz::GWAS_catalog_tsv_reader( "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/data/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
file =  "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/data/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv"
file <- as.data.frame(fread(file)) #read tsv as dataframe
file
file =  "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/data/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv"
file =  "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/CopyOfgwas-association-downloaded_2021-09-13-EFO_1000649.tsv"
file <- as.data.frame(fread(file)) #read tsv as dataframe
"C:\Users\Luca Anholt\Desktop\R\Package_2 - Copy\PanViz\gwas-association-downloaded_2021-09-13-EFO_1000649.tsv"
file =  "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv"
file <- as.data.frame(fread(file)) #read tsv as dataframe
file
file =  "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv"
df <- PanViz::GWAS_catalog_tsv_to_dataframe(file)
head(df)
G1 <- PanViz::get_IMON(df$snps, ego = 5, export = "graphml")
G
G1
G1 <- PanViz::get_IMON(df$snps, ego = 7, export = "graphml")
G1
which(V(G1)$type %in% "METABOLITE")
V(G1)[which(V(G1)$type %in% "METABOLITE")]
V(G1)[which(V(G1)$type %in% "METABOLITE")]$name
V(G1)[which(V(G1)$type %in% "METABOLITE")]$id
V(G1)[which(V(G1)$type %in% "METABOLITE")][[1]]
V(G1)[which(V(G1)$type %in% "METABOLITE")]$ID
V(G1)[which(V(G1)$type %in% "GENE")]$ID
V(G1)[which(V(G1)$type %in% "SNP")]$ID
library(PanViz)
PanViz::]
df = PanViz::GWAS_catalog_tsv_to_dataframe(file = "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/data")
df = PanViz::GWAS_catalog_tsv_to_dataframe(file = "C:/Users/Luca Anholt/Desktop/R/Package_2 - Copy/PanViz/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
df
PanViz::get_grouped_IMON(dataframe = df, groupby = "studies", ego = 5, export_type = "igraph", colour_groups = TRUE)
G <- PanViz::get_grouped_IMON(dataframe = df, groupby = "studies", ego = 5, export_type = "igraph")
G
?usethis::use_data
library(PanViz)
BiocManager::install("BiocStyle")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
install.packages("BiocManager")
sessionInfo()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
install.packages("roxygen2")
install.packages("tidyverse")
BiocManager::install("KEGGREST")
install.packages("devtools")
install.packages("svMisc")
install.packages("futile.logger")
install.packages("foreach")
install.packages("doSNOW")
install.packages("easycsv")
install.packages("rentrez")
install.packages("igraph")
install.packages("RColorBrewer")
install.packages("hash")
install.packages("data.table")
install.packages("colorspace")
install.packages("igraph")
library(PanViz)
PanViz::get_IMON(snp_list = PanViz::er_snp_vector, ego = 5, save_file = FALSE)]
PanViz::get_IMON(snp_list = PanViz::er_snp_vector, ego = 5, save_file = FALSE)
df <- PanViz::GWAS_catalog_tsv_to_dataframe(file = paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv"))
PanViz::get_grouped_IMON(dataframe = df, groupby = "unexpected_name", ego = 5, save_file = FALSE, colour_groups = FALSE)
groupby = "Â£"
groupby %in% c("studies", "trais")
as.integer(groupby %in% c("studies", "trais")) == 0
library(PanViz)
devtools::test()
devtools::test()
devtools::test()
PanViz::get_IMON(snp_list = PanViz::er_snp_vector, ego = 5, save_file = FALSE)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
df <- data.frame(snps = c("rs3454594054594", "rs4545490954"), studies = c("study1", "study2"), traits = c("trait1", "trait1"))
PanViz::get_grouped_IMON(dataframe = df, groupby = "studies", ego = 5, save_file = FALSE)
class(iris)
devtools::test()
grep(pattern = ".tsv", x = "gwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
grep(pattern = ".tsv", x = "gwas-association-downloaded_2021-09-13-EFO_1000649.csv")
devtools::test()
devtools::test()
PanViz::GWAS_catalog_tsv_to_dataframe(file = paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv"))
PanViz::GWAS_catalog_tsv_to_dataframe(file = paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.csv"))
library(PanViz)
PanViz::GWAS_catalog_tsv_to_dataframe(file = paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.csv"))
paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.csv"
)
paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.csv")
testtest <- paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.csv")
grep(pattern = ".tsv", x = testtest) != 1
testtest
grep(pattern = ".tsv", x = testtest)
integer(grep(pattern = ".tsv", x = testtest))
length(grep(pattern = ".tsv", x = testtest))
length(grep(pattern = ".tsv", x = "TEST.tsv"))
length(grep(pattern = ".tsv", x = "TEST.csv"))
library(PanViz)
PanViz::GWAS_catalog_tsv_to_dataframe(file = testtest)
devtools::test()
devtools::test()
PanViz::GWAS_catalog_tsv_to_dataframe(file = paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv"))
devtools::test()
library(PanViz)
library(PanViz)
devtools::test()
library(PanViz)
library(PanViz)
path <- paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
GWAS_catalog_tsv_to_dataframe <- function(file){
if(missing(file)){ ##check if user has provided file, if not send error
stop("Argument file missing. Please provide a directory path to a GWAS Catalog association .tsv file")
}
if(length(grep(pattern = ".tsv", x = file)) != 1){ ##check if user has provided correct file extension, if not send error
stop("File provided must be .tsv file format")
}
file <- as.data.frame(data.table::fread(file)) #read tsv as dataframe
if(is.null(file)){ ##check that file was properly read, if not send error
stop(".tsv file is empty - please check the file provided")
}
results <- file %>%
tidyr::separate_rows(data = ., SNPS, sep = ";\\s+") %>% #separate aggregated snps into separate rows
tidyr::separate_rows(data = ., SNPS, sep = " x ") %>%     #separate aggregated snps into separate rows
dplyr::filter(.data = ., stringr::str_detect(.data$SNPS, "rs")) %>%
dplyr::select(.data = ., SNPS, STUDY, `DISEASE/TRAIT`) %>%
dplyr::rename(.data = ., snps = SNPS, studies = STUDY, traits = `DISEASE/TRAIT`)
# snps <- df$SNPS[stringr::str_detect(df$SNPS, "rs")] #only take snps in standard dbSNP accession number naming convention
# studies <- df[stringr::str_detect(df$SNPS, "rs"),]$STUDY #get studies for these rows
# traits <- df[stringr::str_detect(df$SNPS, "rs"),]$`DISEASE/TRAIT` #get traits for these rows
# results <- data.frame(snps = snps, studies = studies, traits = traits) #create new dataframe
# results$snps <- as.character(results$snps) #convert data to strings instead of factors
# results$studies <- as.character(results$studies)
# results$traits <- as.character(results$traits)
return(results)
}
GWAS_catalog_tsv_to_dataframe(file = path)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- txtProgressBar(max = iterations, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) %dopar%
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- txtProgressBar(max = iterations, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) %dopar%
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100, style = 3)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) foreach::`%dopar%`
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100, style = 3)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) foreach::`%dopar%`
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100, style = 3)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) %dopar%
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) %dopar%
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100, style = 2)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) %dopar%
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100, style = 3)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) foreach::`%dopar%`()
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100, style = 3)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) foreach::`%dopar%`(
{
s <- summary(rnorm(1e6))[3]
return(s)
}
)
close(pb)
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2)
registerDoSNOW(cl)
iterations <- 100
pb <- utils::txtProgressBar(max = 100, style = 3)
progress <- function(n) utils::setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = rbind,
.options.snow = opts) %dopar%
{
s <- summary(rnorm(1e6))[3]
return(s)
}
close(pb)
stopCluster(cl)
PanViz:::Genes_Get_All()
library(PanViz)
library(PanViz)
PanViz:::Genes_Get_All()
library(PanViz)
PanViz:::Genes_Get_All()
PanViz:::Reactions_Get_All()
library(PanViz)
PanViz:::Reactions_Get_All()
library(PanViz)
PanViz:::get_compound_hashmap()
library(PanViz)
PanViz:::NCBI_Gene_Locations(Gene_Enterez_IDs = c("5669"))
PanViz:::NCBI_Gene_Locations(Gene_Enterez_IDs = 5669)
PanViz:::NCBI_Gene_Locations(Gene_Enterez_IDs = c(5669))
library(PanViz)
library(PanViz)
library(PanViz)
##getting tsv file directory path from package data directory - this will be replaced with the users own tsv file path
path <- paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv")
##parsing tsv file into dataframe object
snp_df <- PanViz::GWAS_catalog_tsv_to_dataframe(path)
head(snp_df)
##creating IMON using the first 5 studies reported and creating a grouping variable based on studies
snp_df <- dplyr::filter(snp_df, studies %in% unique(snp_df$studies)[1:5])
IMON <- PanViz::get_grouped_IMON(dataframe = snp_df, groupby = "studies", ego = 5, save_file = FALSE)
##creating an IMON again using the first 5 studies reported within the downloaded tsv file, grouping by studies and colouring the nodes/edges of the graph based on these groups:
IMON <- PanViz::get_grouped_IMON(dataframe = snp_df, groupby = "studies", ego = 5, save_file = FALSE, colour_groups = TRUE)
library(PanViz)
IMON <- PanViz::get_grouped_IMON(dataframe = snp_df, groupby = "studies", ego = 5, save_file = FALSE, colour_groups = TRUE)
library(PanViz)
##creating an IMON again using the first 5 studies reported within the downloaded tsv file, grouping by studies and colouring the nodes/edges of the graph based on these groups:
IMON <- PanViz::get_grouped_IMON(dataframe = snp_df, groupby = "studies", ego = 5, save_file = FALSE, colour_groups = TRUE)
##creating custom igraph tree layout plotting from SNP downards to metabolite:
myformat <- function(IMON) {
layout.reingold.tilford(IMON, root = V(IMON)[grepl("SNP", V(IMON)$type)], flip.y = TRUE, circular = FALSE)
}
##setting format for igraph object:
format <- myformat(IMON)
layout(rbind(1,2), heights=c(7,1))  # put legend on bottom 1/8th of the chart
##plotting the IMON using the custom tree algorithm:
plot(IMON,
vertex.label.cex = 0.5,
vertex.size = 5,
edge.arrow.size=.1,
vertex.label = NA,
vertex.color= adjustcolor(V(IMON)$col, alpha = 0.5),
edge.color = adjustcolor(E(IMON)$col, alpha = 0.5),
edge.width = 1.5,
layout = format,
vertex.frame.width = 0.001
)
# setup for no margins on the legend
par(mar=c(0, 0, 0, 0))
plot.new()
##getting the unique group names and their respective colours from the IMON (and using them to create a legend)
unique_group_names <- unique(V(IMON)$group)[!is.na(unique(V(IMON)$group))]
unique_group_cols <- unique(V(IMON)[which(V(IMON)$group %in% unique_group_names)]$col)
groupings <- factor(unique_group_names)
legend('bottom',bty = "n",
legend=levels(groupings),
fill=unique_group_cols, border=NA, cex = 1.7)
library(PanViz)
devtools::test()
class(as.tibble(iris))
class(tibble(iris))
class(tibble::tibble(iris))
all(inherits(tibble::tibble(), c("tbl_df", "data.frame"), which = TRUE) > 0)
expect_s3_class(tibble(iris))
expect_s3_class(tibble::tibble(iris))
expect_s3_class(tibble::tibble(iris), class = "tbl")
expect_s3_class(tibble::tibble(iris), class = "tbl")
expect_s3_class(tibble::tibble(iris), class = c("tbl_df", "tbl","data.frame"))
library(PanViz)
PanViz::GWAS_catalog_tsv_to_dataframe(file = paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv"))
dim(PanViz::GWAS_catalog_tsv_to_dataframe(file = paste0(find.package("PanViz", lib.loc=NULL, quiet = TRUE), "/data/gwas-association-downloaded_2021-09-13-EFO_1000649.tsv")))
testthat::expect_s3_classes(tibble::tibble(), c("tbl_df", "data.frame"))
library(PanViz)
devtools::test()
library(PanViz)
library(PanViz)
git rm -r --cached .Rproj.user
